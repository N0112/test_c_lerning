以下の表は、ある家庭の家計簿である。この表を基に構造体を用いて、以下に指示する処理を行いなさい。

月	住居費	食費	被服費	教養費	医療費	その他
1月	86000	47000	3000	20000	9500	66000
2月	86000	43000	30000	15000	0	43000
3月	86000	38600	5000	65000	500	76000
4月	86000	39500	0	12000	0	75000
5月	86000	38600	28000	7000	5200	63500
6月	86000	37500	3000	5000	0	67000


１、構造体kakeiを定義し、月、住居費、食費、被服費、教養費、医療費、その他の金額を代入できるようにする。
２、表のデータを、kakei構造体の配列を作成し、初期値として代入する。
３、kakeiのポインタを引数として、費用の合計を求める関数、goukeiを作成し、各月の費用の合計を出力する。
４、医療費の最も少ない月を探し出し、表示する。
５、食費の最も多い月と、その金額を表示する。


#include <stdio.h>

#define NUM_MONTHS 6

typedef struct{
	int month;
	int house;
	int food;
	int clothes;
	int edu;
	int medical;
	int etc;
}kakei;

int goukei(kakei*);
void showGoukei(kakei*);

int main(int argc, char** argv){
	kakei data[NUM_MONTHS] = {
		{ 1,86000,47000,3000,20000,9500,66000 },
		{ 2,86000,43000,30000,15000,0,43000 },
		{ 3,86000,38600,5000,65000,500,76000 },
		{ 4,86000,39500,0,12000,0,75000 },
		{ 5,86000,38600,28000,7000,5200,63500 },
		{ 6,86000,37500,3000,5000,0,67000 }
	};
	
	showGoukei(data);
	
	int max_medical = data[0].medical;
	int max_medical_month = data[0].month;
	for(int i = 1;i < NUM_MONTHS;i++){
		if(data[i].medical > max_medical){
			max_medical = data[i].medical;
			max_medical_month = data[i].month;
		}
	}
	printf("\n医療費の最も多い月：%d月\n",max_medical_month);
	
	int max_food = data[0].food;
	int max_food_month = data[0].month;
	for(int i = 1;i < NUM_MONTHS;i++){
		if(data[i].food > max_food){
			max_food = data[i].food;
			max_food_month = data[i].month;
		}
	}
	printf("食費の最も多い月と金額：%d月、%d\n",max_food_month,max_food);
	
	return 0;
}


int goukei(kakei* data){
	return data->house + data->food + data->clothes + data->edu + data->medical + data->etc;
}

void showGoukei(kakei* data){
	printf("各月の出費の合計\n---------------------\n");
	for(int i = 0;i < NUM_MONTHS;i++){
		printf("%d月　%d\n",(data + i)->month,goukei(&data[i]));
	}
}


【関数としたバージョン】

#include <stdio.h>

#define NUM_MONTHS 6

typedef struct{
	int month;
	int house;
	int food;
	int clothes;
	int edu;
	int medical;
	int etc;
}kakei;

int goukei(kakei*);
void showGoukei(kakei*);
int maxMedicalMonth(kakei*);
int maxFood(kakei*,int*);

int main(int argc, char** argv){
	kakei data[NUM_MONTHS] = {
		{ 1,86000,47000,3000,20000,9500,66000 },
		{ 2,86000,43000,30000,15000,0,43000 },
		{ 3,86000,38600,5000,65000,500,76000 },
		{ 4,86000,39500,0,12000,0,75000 },
		{ 5,86000,38600,28000,7000,5200,63500 },
		{ 6,86000,37500,3000,5000,0,67000 }
	};
	
	showGoukei(data);
	
	int max_medical_month = maxMedicalMonth(data);
	printf("\n医療費の最も多い月：%d月\n",max_medical_month);
	
	int max_food;
	int max_food_month = maxFood(data,&max_food);
	printf("食費の最も多い月と金額：%d月、%d\n",max_food_month,max_food);
	
	return 0;
}


int goukei(const kakei* data){
	return data->house + data->food + data->clothes + data->edu + data->medical + data->etc;
}

void showGoukei(kakei* data){
	printf("各月の出費の合計\n---------------------\n");
	for(int i = 0;i < NUM_MONTHS;i++){
		printf("%d月　%d\n",(data + i)->month,goukei(&data[i]));
	}
}

int maxMedicalMonth(kakei* data){
	int max_medical = data[0].medical;
	int max_medical_month = data[0].month;
	for(int i = 1;i < NUM_MONTHS;i++){
		if(data[i].medical > max_medical){
			max_medical = data[i].medical;
			max_medical_month = data[i].month;
		}
	}
	return max_medical_month;
}

int maxFood(kakei* data,int* max_food){
	*max_food = data[0].food;
	int max_food_month = data[0].month;
	for(int i = 1;i < NUM_MONTHS;i++){
		if(data[i].food > *max_food){
			*max_food = data[i].food;
			max_food_month = data[i].month;
		}
	}
	return max_food_month;
}


